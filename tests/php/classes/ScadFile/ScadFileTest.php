<?php
namespace php\classes\ScadFile;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-13 at 18:21:42.
 */
class ScadFileTest extends \PHPUnit_Framework_TestCase
{
    const CORRECT_TEST_FILE_NAME = "correctScad21TestFile.SPR";
    const EMPTY_TEST_FILE_NAME = "emptyScad21TestFile.SPR";
    const WRONG_TEST_FILE_NAME_01 = "wrongScad21TestFile_01.SPR";
    const WRONG_TEST_FILE_NAME_02 = "wrongScad21TestFile_02.SPR";
    const WRONG_TYPE_FILE_NAME = "wrongTypeTestFile.txt";
//    const CORRECT_DOCS_DESCRIPTION_ADDRESS = 103129;
    
    private $wrongFileFormatExceptionClassName;
    protected $object;

    protected function setUp()
    {
        $this->wrongFileFormatExceptionClassName = get_class(new WrongFileFormatException);
        
        $testFileContent = $this->getFileContent(self::CORRECT_TEST_FILE_NAME);
        $this->object = new ScadFile($testFileContent);
    }
    
    private function getFileContent($fileName) {
        return file_get_contents(realpath(__DIR__ . DIRECTORY_SEPARATOR . $fileName));
    }

    public function testIsCorrectScadFileUploaded() {
        $isObjectCreated = !is_null($this->object);
        $this->assertTrue($isObjectCreated);
    }
    
    public function testIsEmptyScadFileUploaded() {
        $testFileContent = $this->getFileContent(self::EMPTY_TEST_FILE_NAME);
        $object = new ScadFile($testFileContent);
        
        $isObjectCreated = !is_null($object);
        $this->assertTrue($isObjectCreated);
    }
    
    public function testIsWrongScadFileUploadedWithException_01() {
        $this->setExpectedException($this->wrongFileFormatExceptionClassName);
        $testFileContent = $this->getFileContent(self::WRONG_TEST_FILE_NAME_01);
        $object = new ScadFile($testFileContent);
    }
    
    public function testIsWrongScadFileUploadedWithException_02() {
        $this->setExpectedException($this->wrongFileFormatExceptionClassName);
        $testFileContent = $this->getFileContent(self::WRONG_TEST_FILE_NAME_02);
        $object = new ScadFile($testFileContent);
    }
    
    public function testIsWrongTypeFileUploadedWithException() {
        $this->setExpectedException($this->wrongFileFormatExceptionClassName);
        $testFileContent = $this->getFileContent(self::WRONG_TYPE_FILE_NAME);
        $object = new ScadFile($testFileContent);
    }
    
//    public function testGetCorrectFileFooterAddress() {
//        $this->assertEquals(self::CORRECT_DOCS_DESCRIPTION_ADDRESS,
//                $this->object->getFileFooterAddress());
//    }

}
