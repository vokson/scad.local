<?php

namespace php\classes\ScadFile;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-13 at 18:21:42.
 */
class ScadFileTest extends \PHPUnit_Framework_TestCase {

    const RESULT_TEST_FILE_NAME = "resultScad21TestFile.SPR";
    const CORRECT_TEST_FILE_NAME = "correctScad21TestFile.SPR";
    const EMPTY_TEST_FILE_NAME = "emptyScad21TestFile.SPR";
    const WRONG_TEST_FOOTER_INCREASED_FILE_NAME = "wrongScad21FooterIncreasedTestFile.SPR";
    const WRONG_TEST_FOOTER_DECREASED_FILE_NAME = "wrongScad21FooterDecreasedTestFile.SPR";
    const WRONG_TEST_FOOTER_TOO_BIG_FILE_NAME = "wrongScad21FooterTooBigTestFile.SPR";
    const WRONG_TYPE_FILE_NAME = "wrongTypeTestFile.txt";
    const CORRECT_STEEL_GROUP_CHECK_DOCUMENT_FILE_NAME = "correctDocSteelCheckGroup";

    private $wrongFileFormatExceptionClassName;
    private $missingDocumentExceptionClassName;
    private $correctTestFileContent;
    private $correctScadFile;
    private $emptyTestFileContent;
    private $emptyScadFile;
    private $correctSteelCheckGroupDocumentContent;
    
    protected $object;

    protected function setUp() {
        $this->wrongFileFormatExceptionClassName = get_class(new WrongFileFormatException);
        $this->missingDocumentExceptionClassName = get_class(new MissingDocumentException);

        $this->correctTestFileContent = $this->getFileContent(self::CORRECT_TEST_FILE_NAME);
        $this->correctScadFile = new ScadFile($this->correctTestFileContent);

        $this->emptyTestFileContent = $this->getFileContent(self::EMPTY_TEST_FILE_NAME);
        $this->emptyScadFile = new ScadFile($this->emptyTestFileContent);
        
        $this->correctSteelCheckGroupDocumentContent = $this->getFileContent(self::CORRECT_STEEL_GROUP_CHECK_DOCUMENT_FILE_NAME);
    }

    private function getFileContent($fileName) {
        return file_get_contents(realpath(__DIR__ . DIRECTORY_SEPARATOR . $fileName));
    }

    public function testIsCorrectScadFileUploaded() {
        $isObjectCreated = !is_null($this->correctScadFile);
        $this->assertTrue($isObjectCreated);
    }

    public function testIsEmptyScadFileUploaded() {
        $isObjectCreated = !is_null($this->emptyScadFile);
        $this->assertTrue($isObjectCreated);
    }

    public function testIsWrongScadFileFooterAddressIncreasedByOneUploadedWithException() {
        $this->setExpectedException($this->wrongFileFormatExceptionClassName);
        $testFileContent = $this->getFileContent(self::WRONG_TEST_FOOTER_INCREASED_FILE_NAME);
        new ScadFile($testFileContent);
    }

    public function testIsWrongScadFileFooterAddressDecreasedByOneUploadedWithException() {
        $this->setExpectedException($this->wrongFileFormatExceptionClassName);
        $testFileContent = $this->getFileContent(self::WRONG_TEST_FOOTER_DECREASED_FILE_NAME);
        new ScadFile($testFileContent);
    }

    public function testIsWrongScadFileFooterAddressTooBigUploadedWithException() {
        $this->setExpectedException($this->wrongFileFormatExceptionClassName);
        $testFileContent = $this->getFileContent(self::WRONG_TEST_FOOTER_TOO_BIG_FILE_NAME);
        new ScadFile($testFileContent);
    }

    public function testIsWrongTypeFileUploadedWithException() {
        $this->setExpectedException($this->wrongFileFormatExceptionClassName);
        $testFileContent = $this->getFileContent(self::WRONG_TYPE_FILE_NAME);
        new ScadFile($testFileContent);
    }

    public function testSaveCorrectFile() {
        $this->assertEquals($this->correctTestFileContent, $this->correctScadFile->getFile());
    }

    public function testSaveEmptyFile() {
        $this->assertEquals($this->emptyTestFileContent, $this->emptyScadFile->getFile());
    }
    
    public function testGetSteelCheckGroupDocumentFromCorrectFile() {
        $this->assertEquals($this->correctSteelCheckGroupDocumentContent, $this->correctScadFile->getSteelCheckGroupDocument());
    }
    
    public function testSetSteelCheckGroupDocumentFromCorrectFile() {
        $this->correctScadFile->setSteelCheckGroupDocument('TEST DOCUMENT 28');
        file_put_contents(realpath(__DIR__ . DIRECTORY_SEPARATOR . self::RESULT_TEST_FILE_NAME), $this->correctScadFile->getFile());
        
        $file = new ScadFile($this->getFileContent(self::RESULT_TEST_FILE_NAME));
        $this->assertEquals('TEST DOCUMENT 28', $file->getSteelCheckGroupDocument());
    }
    
    public function testGetSteelCheckGroupDocumentFromEmptyFile() {
        $this->setExpectedException($this->missingDocumentExceptionClassName);
        $this->emptyScadFile->getSteelCheckGroupDocument();
    }
}
